{"ast":null,"code":"import{createStore,applyMiddleware}from'redux';import logger from'redux-logger';import{persistStore}from'redux-persist';import createSagaMiddleware from'redux-saga';import rootSaga from'./root-saga';import rootReducer from'./root-reducer';//init sagas\nvar sagaMiddleware=createSagaMiddleware();var middlewares=[sagaMiddleware];// only apply these middlewars in development and not in production\nif(process.env.NODE_ENV==='development'){middlewares.push(logger);};export var store=createStore(rootReducer,applyMiddleware.apply(void 0,middlewares));sagaMiddleware.run(rootSaga);export var persistor=persistStore(store);// session persistance \nconsole.log(typeof sagaMiddleware);export default{store:store,persistor:persistor};","map":{"version":3,"sources":["/Users/corycatherall/Desktop/kc-clothing/client/src/redux/store.js"],"names":["createStore","applyMiddleware","logger","persistStore","createSagaMiddleware","rootSaga","rootReducer","sagaMiddleware","middlewares","process","env","NODE_ENV","push","store","run","persistor","console","log"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,eAAtB,KAA6C,OAA7C,CACA,MAAOC,CAAAA,MAAP,KAAmB,cAAnB,CACA,OAASC,YAAT,KAA6B,eAA7B,CAEA,MAAOC,CAAAA,oBAAP,KAAiC,YAAjC,CAEA,MAAOC,CAAAA,QAAP,KAAqB,aAArB,CAEA,MAAOC,CAAAA,WAAP,KAAwB,gBAAxB,CAEA;AACA,GAAMC,CAAAA,cAAc,CAAGH,oBAAoB,EAA3C,CAEA,GAAMI,CAAAA,WAAW,CAAG,CAACD,cAAD,CAApB,CAEC;AACA,GAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,aAA7B,CAA4C,CACxCH,WAAW,CAACI,IAAZ,CAAiBV,MAAjB,EACH,EAIF,MAAO,IAAMW,CAAAA,KAAK,CAAGb,WAAW,CAACM,WAAD,CAAcL,eAAe,MAAf,QAAmBO,WAAnB,CAAd,CAAzB,CAEPD,cAAc,CAACO,GAAf,CAAmBT,QAAnB,EAEA,MAAO,IAAMU,CAAAA,SAAS,CAAGZ,YAAY,CAACU,KAAD,CAA9B,CAAuC;AAC9CG,OAAO,CAACC,GAAR,CAAY,MAAOV,CAAAA,cAAnB,EACA,cAAe,CAAEM,KAAK,CAALA,KAAF,CAASE,SAAS,CAATA,SAAT,CAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport { persistStore } from 'redux-persist';\n\nimport createSagaMiddleware from 'redux-saga'\n\nimport rootSaga from './root-saga';\n\nimport rootReducer from './root-reducer';\n\n//init sagas\nconst sagaMiddleware = createSagaMiddleware()\n\nconst middlewares = [sagaMiddleware];\n\n // only apply these middlewars in development and not in production\n if (process.env.NODE_ENV === 'development') {\n     middlewares.push(logger)\n };\n\n\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nsagaMiddleware.run(rootSaga)\n\nexport const persistor = persistStore(store); // session persistance \nconsole.log(typeof(sagaMiddleware))\nexport default { store, persistor }; "]},"metadata":{},"sourceType":"module"}