{"ast":null,"code":"import { all, call, put, takeLatest } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message)); // put is essentially the saga version of dispatch\n  }\n}\n; // function* specifies a generator function \n\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\n;\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}","map":{"version":3,"sources":["/Users/corycatherall/Desktop/kc-clothing/client/src/redux/shop/shop.sagas.js"],"names":["all","call","put","takeLatest","ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SACIC,SADJ,EAEIC,+BAFJ,QAGO,+BAHP;AAKA,SACIC,uBADJ,EAEIC,uBAFJ,QAGO,gBAHP;AAKA,OAAO,UAAUC,qBAAV,GAAiC;AACxC,MAAI;AAEA,UAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMb,IAAI,CAACK,+BAAD,EAAkCM,QAAlC,CAAjC;AACA,UAAMV,GAAG,CAACK,uBAAuB,CAACO,cAAD,CAAxB,CAAT;AAEH,GAPD,CAOE,OAAMC,KAAN,EAAa;AACP,UAAMb,GAAG,CAACM,uBAAuB,CAACO,KAAK,CAACC,OAAP,CAAxB,CAAT,CADO,CAEP;AACH;AACJ;AAAA,C,CAED;;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMd,UAAU,CAACC,eAAe,CAACc,uBAAjB,EAChBT,qBADgB,CAAhB;AAGH;AAAA;AAED,OAAO,UAAUU,SAAV,GAAsB;AACzB,QAAMnB,GAAG,CAAC,CAACC,IAAI,CAACgB,qBAAD,CAAL,CAAD,CAAT;AACH","sourcesContent":["import { all, call, put, takeLatest } from 'redux-saga/effects'\nimport ShopActionTypes from './shop.types'\n\nimport { \n    firestore,\n    convertCollectionsSnapshotToMap \n} from '../../firebase/firebase.utils';\n\nimport {\n    fetchCollectionsSuccess,\n    fetchCollectionsFailure \n} from './shop.actions';\n\nexport function* fetchCollectionsAsync(){\ntry {\n\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot)\n    yield put(fetchCollectionsSuccess(collectionsMap))\n   \n} catch(error) {\n        yield put(fetchCollectionsFailure(error.message))\n        // put is essentially the saga version of dispatch\n    }\n};\n\n// function* specifies a generator function \nexport function* fetchCollectionsStart() {\n    yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, \n    fetchCollectionsAsync\n        );\n};\n\nexport function* shopSagas() {\n    yield all([call(fetchCollectionsStart)])\n}"]},"metadata":{},"sourceType":"module"}