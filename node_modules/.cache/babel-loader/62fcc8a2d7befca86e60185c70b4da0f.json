{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInFailure, signInSuccess, signOutSuccess, signOutFailure, signUpFailure, signUpSuccess } from './user.actions';\nexport function* getSnapShotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* signInWithGoogle() {\n  try {\n    // destructuring user off of the auth object\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapShotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\n;\nexport function* signUp({\n  payload: {\n    displayName,\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield createUserProfileDocument(user, {\n      displayName\n    });\n    yield put(signUpSuccess(user));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\n;\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n;\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n;\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n;\nexport function* onSignOutStart() {\n  // first param is the action.type listener, the next is which saga function to run.\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\n;\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated), call(onSignOutStart), call(onSignUpStart)]);\n}\n;","map":{"version":3,"sources":["/Users/corycatherall/Desktop/kc-clothing/client/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInFailure","signInSuccess","signOutSuccess","signOutFailure","signUpFailure","signUpSuccess","getSnapShotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUp","displayName","createUserWithEmailAndPassword","onSignUpStart","SIGN_UP_START","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport UserActionTypes from './user.types';\n\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils'\nimport { signInFailure, signInSuccess, signOutSuccess, signOutFailure, signUpFailure, signUpSuccess } from './user.actions';\n\nexport function* getSnapShotFromUserAuth(userAuth) {\n    try{\n        const userRef = yield call(createUserProfileDocument, userAuth);\n        const userSnapshot = yield userRef.get();\n        yield put(signInSuccess({id: userSnapshot.id, ...userSnapshot.data() }))\n    } catch(error){\n       yield put(signInFailure(error))\n    }\n};\n\nexport function* signInWithGoogle(){\n    try{\n        // destructuring user off of the auth object\n        const { user } = yield auth.signInWithPopup(googleProvider);\n        yield getSnapShotFromUserAuth(user)\n    } catch(error){\n        yield put(signInFailure(error))\n    }\n};\n\nexport function* signInWithEmail({ payload: {email, password}}){\n    try{\n        const { user } = yield auth.signInWithEmailAndPassword(email, password)\n       yield getSnapShotFromUserAuth(user)\n    } catch(error){\n        yield put(signInFailure(error))\n    }\n};\n\nexport function* isUserAuthenticated(){\n    try{\n        const userAuth = yield getCurrentUser();\n        if (!userAuth) return;\n        yield getSnapShotFromUserAuth(userAuth)\n    } catch(error) {\n        yield put(signInFailure(error))\n    }\n};\n\nexport function* signOut(){\n    try{\n       yield auth.signOut()\n       yield put(signOutSuccess())\n    }catch(error){\n        yield put(signOutFailure(error))\n    }\n};\n\nexport function* signUp({payload:{displayName, email, password}}){\n    try{\n        const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n        yield createUserProfileDocument(user, {displayName})\n        yield put(signUpSuccess(user))\n    }catch(error){\n        yield put(signUpFailure(error))\n    }\n};\n\n\n\nexport function* onSignUpStart(){\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp)\n}\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n};\n\nexport function* onEmailSignInStart(){\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\n};\n\nexport function* onCheckUserSession(){\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated )\n};\n\nexport function* onSignOutStart(){ // first param is the action.type listener, the next is which saga function to run.\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut)\n};\n\n\n\nexport function* userSagas() {\n    yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated), call(onSignOutStart), call(onSignUpStart)])\n};"]},"metadata":{},"sourceType":"module"}