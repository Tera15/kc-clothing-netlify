{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport { persistStore } from 'redux-persist';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './root-saga';\nimport rootReducer from './root-reducer'; //init sagas\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware]; // only apply these middlewars in development and not in production\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\n;\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\nsagaMiddleware.run(rootSaga);\nexport const persistor = persistStore(store); // session persistance \n\nconsole.log(typeof sagaMiddleware);\nexport default {\n  store,\n  persistor\n};","map":{"version":3,"sources":["/Users/corycatherall/Desktop/kc-clothing/client/src/redux/store.js"],"names":["createStore","applyMiddleware","logger","persistStore","createSagaMiddleware","rootSaga","rootReducer","sagaMiddleware","middlewares","process","env","NODE_ENV","push","store","run","persistor","console","log"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,YAAT,QAA6B,eAA7B;AAEA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,QAAP,MAAqB,aAArB;AAEA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;;AACA,MAAMC,cAAc,GAAGH,oBAAoB,EAA3C;AAEA,MAAMI,WAAW,GAAG,CAACD,cAAD,CAApB,C,CAEC;;AACA,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AACxCH,EAAAA,WAAW,CAACI,IAAZ,CAAiBV,MAAjB;AACH;;AAAA;AAIF,OAAO,MAAMW,KAAK,GAAGb,WAAW,CAACM,WAAD,EAAcL,eAAe,CAAC,GAAGO,WAAJ,CAA7B,CAAzB;AAEPD,cAAc,CAACO,GAAf,CAAmBT,QAAnB;AAEA,OAAO,MAAMU,SAAS,GAAGZ,YAAY,CAACU,KAAD,CAA9B,C,CAAuC;;AAC9CG,OAAO,CAACC,GAAR,CAAY,OAAOV,cAAnB;AACA,eAAe;AAAEM,EAAAA,KAAF;AAASE,EAAAA;AAAT,CAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport { persistStore } from 'redux-persist';\n\nimport createSagaMiddleware from 'redux-saga'\n\nimport rootSaga from './root-saga';\n\nimport rootReducer from './root-reducer';\n\n//init sagas\nconst sagaMiddleware = createSagaMiddleware()\n\nconst middlewares = [sagaMiddleware];\n\n // only apply these middlewars in development and not in production\n if (process.env.NODE_ENV === 'development') {\n     middlewares.push(logger)\n };\n\n\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nsagaMiddleware.run(rootSaga)\n\nexport const persistor = persistStore(store); // session persistance \nconsole.log(typeof(sagaMiddleware))\nexport default { store, persistor }; "]},"metadata":{},"sourceType":"module"}